LRU Vs LFU


1. same request is repeating then LRU is efficient but LFU is in-efficient because of replacement of element
but if data in round robin order then LRU  will perform worst because or replacement of data to defeat the case purpose
but LFU one delete one add
2.





LRU
Custom Cache approach
DSA : DoublyLinkedList and HashMap
DoublyLinkedList , so can remove in O(1)
head, tail references , so addLast can we done O(1)
HashMap<key,Node> where
Node { key,value} , key is redundant but it's helpful while removing least recently entry from hashMap
public Node removeNode(Node nodeAddress); // first last , middle node deletion
public Node addLast(key);

LinkedHashMap approach
override LinkedHashMap constructor(capacity, LF(.75f), accessOrder(true)) and override removeEldestEntry(Map.Entry<key,Value>) (return capacity < size())
: by default LinkedHashMap accessOrder is insertion but we can pass true to use access order



extension :
Storage type would dynamic

interface Storage { storageType }

RAMStorage implements Storage
SSDStorage implements Storage
DBStorage implements Storage
etc
StorageFactory {
}

CacheBuilder if we want some optional with param like storageType , capacity , default cache implementation type etc

Scenario
1. Define interfaces
generic data type
Storage and it's type ( RAM , SSD etc) and use Factory pattern
Eviction policy ( LRU , LFU etc) and we can use strategy pattern as well for algorithm
2. finally Create cache class  , you can use builder design pattern as well
Extended requirement like use priority or TTL value provided for optional purpose

3. Handle concurrency ( like in java Lock or ConcurrentHashMap)





FAQ
upfront question
1. can we put different value for existing key

Can ask later stage if time permits
1. Concurrency need to handle
2. TTL



LFU (Least Frequently Used)

eg : In real life, we can take the example of typing some texts on your phone.

https://www.enjoyalgorithms.com/blog/least-frequently-used-cache


approach
1. DSA
KeyValueHashMap [ key-->value]
keyFrequencyHashMap [ key--> freqCount]
freqKeysTreeMap [ fre --> DoublyLinkedList<Keys>]













